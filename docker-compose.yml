services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"   # external access (from host machine)
      - "9093:9093"   # controller port
    networks: [ ecom-network ]
    volumes: [ kafka-data:/bitnami/kafka ]
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5





  shared-db:
    image: postgres:15
    container_name: shared-db
    environment:
      POSTGRES_DB: ecommerce_shared_db
      POSTGRES_USER: microservice_user
      POSTGRES_PASSWORD: YourStrong!Secure!Password123
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U microservice_user -d ecommerce_shared_db" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes: [ shared-db-data:/var/lib/postgresql/data ]
    ports: [ "5432:5432" ]
    networks: [ ecom-network ]



  redis-cart:
    image: redis:alpine
    container_name: redis-cart
    ports: [ "6379:6379" ] # Expose Redis port to host for debugging
    volumes: [ redis-cart-data:/data ]
    networks: [ ecom-network ]


  # APPLICATION MICROSERVICES
  auth-service:
    build: { context: ., dockerfile: ./auth-service/Dockerfile }
    container_name: auth-service
    init: true
    depends_on:
      shared-db:
        condition: service_healthy
    environment:
      - SERVER_PORT=8081
      - DB_HOST=shared-db # Points to the shared database service
      - DB_NAME=ecommerce_shared_db
      - DB_USER=microservice_user
      - DB_PASS=YourStrong!Secure!Password123
      - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ecom-network]
    restart: always



  gateway-service:
    build: { context: ., dockerfile: ./gateway-service/Dockerfile }
    container_name: gateway-service
    init: true
    ports: [ "8080:8080" ]
    depends_on: [ auth-service, product-service, cart-service, order-service, payment-service ]
    environment: [ SERVER_PORT=8080, SPRING_PROFILES_ACTIVE=docker, JAVA_OPTS= -Djdk.internal.platform.disableContainerSupport ]

    networks: [ ecom-network ]



  product-service:
    build: { context: ., dockerfile: ./product-service/Dockerfile }
    container_name: product-service
    init: true
    depends_on:
      kafka:
        condition: service_healthy
      shared-db:
        condition: service_healthy



    environment:
       - SERVER_PORT=8082
       - DB_HOST=shared-db
       - DB_NAME=ecommerce_shared_db
       - DB_USER=microservice_user
       - DB_PASS=YourStrong!Secure!Password123
       - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
       - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ ecom-network ]



  cart-service:
    build: { context: ., dockerfile: ./cart-service/Dockerfile }
    container_name: cart-service
    init: true
    depends_on:
      - redis-cart
      - product-service
    environment:
      - SERVER_PORT=8083
      - SPRING_DATA_REDIS_HOST=redis-cart
      - SPRING_DATA_REDIS_PORT=6379
      - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ ecom-network ]



  order-service:
    build: { context: ., dockerfile: ./order-service/Dockerfile }
    container_name: order-service
    init: true
    depends_on:
      - shared-db
      - kafka
      - cart-service 
    environment:
      - SERVER_PORT=8084
      - DB_HOST=shared-db
      - DB_NAME=ecommerce_shared_db
      - DB_USER=microservice_user
      - DB_PASS=YourStrong!Secure!Password123
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CART_SERVICE_HOST=cart-service
      - CART_SERVICE_PORT=8083
      - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ ecom-network ]



  payment-service:
    build: { context: ., dockerfile: ./payment-service/Dockerfile }
    container_name: payment-service
    init: true
    depends_on:
      shared-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SERVER_PORT=8085 
      - DB_HOST=shared-db
      - DB_NAME=ecommerce_shared_db
      - DB_USER=microservice_user
      - DB_PASS=YourStrong!Secure!Password123
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ ecom-network ]


  notification-service:
    build: { context: ., dockerfile: ./notification-service/Dockerfile }
    container_name: notification-service
    init: true
    depends_on:
       kafka:
         condition: service_healthy
    environment:
      - SERVER_PORT=8086
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_OPTS=-Djdk.internal.platform.disableContainerSupport
    networks: [ecom-network]



# SHARED RESOURCES
networks:
  ecom-network:
    driver: bridge

volumes:
  kafka-data:
  shared-db-data:
  redis-cart-data: # Single volume for the shared database